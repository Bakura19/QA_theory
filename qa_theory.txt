1.	Что подразумевается под тестовой средой
Среда в которой работают тестировщики, в которой устанавливаются поставки ПО, которые выдают разработчики. Здесь тестировщики проверяют функционал, проводят регрессионное тестирование, воспроизводят ошибки.
2. В чем отличие build от release
Билд – это промежуточная версия программного средства. Релиз является окончательной версией программного средства.
3. Основные фазы тестирования
Pre-Alpha: прототип, в котором всё ещё присутствует много ошибок и наверняка неполный функционал. Необходим для ознакомления с будущими возможностями программ.
Alpha: является ранней версией программного продукта, тестирование которой проводится внутри фирмы-разработчика независимой командой тестировщиков.
Beta: практически готовый продукт, который разработан в первую очередь для тестирования конечными пользователями.
Release Candidate (RC): возможные ошибки в каждой из фичей уже устранены и разработчики выпускают версию на которой проводится регрессионное тестирование.
Release: финальная версия программы, которая готова к использованию.
Pre-Alpha: прототип, в котором всё ещё присутствует много ошибок и наверняка неполный функционал. Необходим для ознакомления с будущими возможностями программ.
Alpha: является ранней версией программного продукта, тестирование которой проводится внутри фирмы-разработчика независимой командой тестировщиков.
Beta: практически готовый продукт, который разработан в первую очередь для тестирования конечными пользователями.
Release Candidate (RC): возможные ошибки в каждой из фичей уже устранены и разработчики выпускают версию на которой проводится регрессионное тестирование.
Release: финальная версия программы, которая готова к использованию.
4. Что такое импакт анализ?
Импакт анализ - это исследование, которое позволяет указать затронутые места в проекте при разработке новой функциональности или изменении старой функциональности, а также определить, насколько значительно они были затронуты.
Импакт анализ может быть полезным в следующих случаях:
-есть изменения в требованиях;
-получен запрос на внесение изменений в продукт;
-ожидается внедрение нового модуля или функциональности в -существующий продукт;
-каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.
5. Критерии выбора тестов
 -достаточность, т. е. критерий должен показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы;
 -полнота, т. е. в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку;
 -надежность, т. е. любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы;
 -проверяемость, т. е. критерий должен быть легко проверяемым, например, вычисляемым на тестах.
6. Принципы тестирования
Принцип 1 — Тестирование демонстрирует наличие дефектов.
Тестирование только снижает вероятность наличия дефектов, которые находятся в программном обеспечении, но не гарантирует их отсутствия.
Принцип 2 — Исчерпывающее тестирование невозможно.
Полное тестирование с использованием всех входных комбинаций данных, результатов и предусловий физически невыполнимо (исключение — тривиальные случаи).
Принцип 3 — Раннее тестирование.
Следует начинать тестирование на ранних стадиях жизненного цикла разработки ПО, чтобы найти дефекты как можно раньше.
Принцип 4 — Скопление дефектов.
Большая часть дефектов находится в ограниченном количестве модулей.
Принцип 5 — Парадокс пестицида.
Если повторять те же тестовые сценарии снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты.
Принцип 6 — Тестирование зависит от контекста. 
Тестирование проводится по-разному в зависимости от контекста. Например, программное обеспечение, в котором критически важна безопасность, тестируется иначе, чем новостной портал.
Принцип 7 — Заблуждение об отсутствии ошибок. 
Отсутствие найденных дефектов при тестировании не всегда означает готовность продукта к релизу. Система должна быть удобна пользователю в использовании и удовлетворять его ожиданиям и потребностям. 
7. Независимое тестирование (аутсорсинг тестирования) - это тестирование силами дополнительно привлечённой компании или группы людей, не участвующих непосредственно в разработке программного обеспечения. Из самой идеи независимого тестирования следует, что работа выполняется группой людей, которые не находятся в прямом подчинении руководителя разработки программного проекта. 
8. Тестирование со сдвигом влево - это подход к тестированию программного обеспечения и системного тестирования, при котором тестирование выполняется на более ранней стадии жизненного цикла.
10. Этапы тестирования
-анализ системы и подбор требований;
-одготовка стратегии;
-настройка генератора нагрузки;
-проведение мониторинга серверов и генератора нагрузки;
-подготовка тестовых данных;
-разработка нагрузочных скриптов;
-предварительные запуски тестов;
-проведение тестирования;
-анализ результатов и подготовка отчёта.
11.
12.
13. Тестовые данные - это данные, которые нужны для выполнения тест-кейсов.
14. Бета-тестирование – интенсивное использование почти готовой версии продукта с целью выявления максимального числа ошибок в его работе для их последующего устранения перед окончательным выходом (релизом) продукта на рынок, к массовому потребителю. Бета-тестирование представляет собой реально работающую версию программы с полным функционалом. И задача бета-тестов – оценить возможности и стабильность работы программы с точки зрения ее будущих пользователей.
15. Пилотное тестирование - тип тестирования программного обеспечения, при котором проверяется компонент системы или вся система в рабочих условиях в реальном времени. Целью пилотного тестирования является оценка осуществимости, времени, стоимости, риска и производительности исследовательского проекта.
16. Бизнес-логика - это совокупность реализуемых прикладных функций в предметной области.
17. 
18. Методы тестирования:
- Метод белого ящика - метод при котором тестировщик имеет доступ к внутренней структуре системы (код, БД) и опирается на её поинмание при составлении тестов или использует её во время тестирования.
- Метод чёрного ящика - тестирование приложения без знания внутренней структуры системы, когда тестировщик опирается на требования и работает с интерфесом как конечный пользователь.
- Метод серого ящика - тестирование при котором тестировщик имеет доступ только к некоторой части кода/БД и используетэто при составлении тестов и их выполнении.
19. 
20. Негативное тестирование -  это тестирование на данных или сценариях, которые соответствуют нештатному поведению тестируемой системы – различные сообщения об ошибках, исключительные ситуации. Основной целью “негативного” тестирования является проверка устойчивости системы к воздействиям различного рода, валидация неверного набора данных, проверка обработки исключительных ситуаций.
21. Позитивное тестирование - тестирование с применением сценариев, которые соответсвуют нормальному поведению программного средства.
22. Компонентное (модульное) тестирование - тестирование отдельного модульного.
23. Интеграционное тестирование - тестирование взаимодействия модулей.
24. 
25. Системное тестирование - полная проверка приложения.
26.
27. Системное интеграционное тестирование - проверка законченнго и полностью интегрированного программного продукта.
28. Функциональное тестирование - тестирование, основаннок на анализе спецификации функциональности приложения, проводимое с целью проверки на соответствие требованиям. Проверка того "что" система делает.
29. 
30. 24. Тестирование соответствия - это метод тестирования программного обеспечения, используемый для подтверждения того, что программная система соответствует определённым стандартам и правилам. Целью тестирования соответствия является определение того, как тестируемая система подтверждает соответствие индивидуальным требованиям конкретного стандарта. 
31. Нефункциональное тестирование - тестирование свойств приложения, которые не относятся к функциональности системы. Проверка того, "как" работает приложение (надёжность, эффективность, безопасность, сопровождаемость).
32. 
33.
34.
35.
36.
37.
38.
39.
40.
41.
42.
43.
44. 46.47. Mutation testing - это тип тестирования программного обеспечения, в котором мы мутируем (меняем) определенные выражения в исходном коде и проверяем, способны ли Test case найти ошибки. Это тип тестирования белого ящика, который в основном используется для модульного тестирования. Изменения в мутантной программе сохраняются крайне небольшими, поэтому это не влияет на общую цель программы. Цель Mutation testing - оценить качество Test case, которые должны быть достаточно надежными, чтобы не выполнять мутантный код. Этот метод также называется стратегией тестирования на основе ошибок, так как он включает в себя создание ошибки в программе. 
Шаг 1: Ошибки вводятся в исходный код программы путем создания множества версий, называемых мутантами. Каждый мутант должен содержать одну ошибку, и цель состоит в том, чтобы заставить версию мутанта потерпеть неудачу, что демонстрирует эффективность Test case. 
Шаг 2: Test case применяются к исходной программе, а также к программе мутанта. 
Шаг 3: Сравните результаты оригинальной и мутантной программы. 
Шаг 4: Если исходная программа и программы-мутанты генерируют разные выходные данные, то этот мутант уничтожается by the Test case. Следовательно, Test case достаточно хорош, чтобы обнаружить изменение между оригинальной и мутантной программой. 
Шаг 5: Если исходная программа и программа-мутант генерируют одинаковые выходные данные, мутант остается в живых. В таких случаях необходимо создать более эффективные Test case, которые убивают всех мутантов.
Что изменить в программе мутантов? Есть несколько методов, которые могут быть использованы для создания мутантных программ: 
Операторы замены операндов (Operand replacement operators) – например, в условии if (x> y) поменять местами значения x и y
Операторы модификации выражений (Expression Modification Operators) – например, в условии if (х == у) Мы можем заменить == на >=
Операторы модификации операторов (Statement modification Operators) – например, удалить часть else в конструкции if-else или удалить целиком конструкцию if-else, чтобы проверить, как ведет себя программа.
45.
46. A/B тестирование.
A / B-тестирование также называется сплит-тестированием. При тестировании AB мы создаем и анализируем два варианта приложения, чтобы найти, какой вариант работает лучше с точки зрения пользовательского опыта, потенциальных клиентов, а затем в конечном итоге сохраняем наиболее эффективный вариант. 
47. Что означает сквозное тестирование? (E2E - End–to–End)
Сквозное тестирование - это стратегия тестирования для выполнения тестов, которые охватывают все возможные потоки приложения от его начала до конца; проверяет программную систему вместе с ее интеграцией с внешними интерфейсами. Сквозное тестирование обычно выполняется после функционального и системного тестирования.
48. В чем разница между E2E и системным тестированием?
End to End testing: 
- Проверяет программную систему, а также взаимосвязанные подсистемы. 
- Проверяет весь E2E flow. 
- Все интерфейсы, бэкэнд-системы. 
- Выполняется после завершения System testing. 
- Сквозное тестирование включает проверку внешних интерфейсов, которые могут быть сложными для автоматизации. Следовательно, ручное тестирование является предпочтительным.
System testing: 
- Проверяет только программную систему в соответствии со спецификациями требований.
- Проверяет функциональные возможности и функции системы.
- Функциональное и нефункциональное тестирование
- Выполняется после завершения Integration testing
- Как ручное, так и автоматическое могут быть выполнены для тестирования системы
49. Параллельное тестирование - метод тестирования для обнаружения дефектов в приложении, когда в систему вошли несколько пользователей, то есть отслеживание эффекта, когда несколько пользователей выполняют одно и то же действие одновременно.
Зачем оно нужно:
Определяет влияние одновременного доступа к одним и тем же записям базы данных, модулям или коду приложения. 
Определяет и измеряет уровень взаимоблокировки, блокировки и использования однопоточного кода и ограничения доступа к общим ресурсам
50. Отличие AdHoc тестирования от исследовательского тестирования. 
При исследовательском тестировании тесты разрабатываются и выполненяются в одно и то же время, полученная информация при тестировании используется для проектирования новых и улучшеных тестов. При AdHoc тестировании отсутствуют документация, тест-дизайн, тест-кейсы, а используются только знания и представления тестировщика о программном средстве.


47. Тестирование переносимости — это тип тестирования программного обеспечения, который проводится для определения степени легкости или сложности, с которой программное приложение может быть эффективно и эффективно перенесено с одного аппаратного обеспечения, программного обеспечения или среды на другое. Результаты тестирования переносимости представляют собой измерения того, насколько легко программный компонент или приложение будут интегрированы в среду, и затем эти результаты будут сравниваться с нефункциональным требованием переносимости программной системы. Измерение основано на сравнении стоимости адаптации программного обеспечения к новой среде и стоимости реконструкции. Атрибуты тестирования переносимости:
Адаптивность: Адаптируемость определяется как способность программного приложения адаптироваться к конкретной среде без каких-либо усилий. Общие стандарты связи между несколькими системами помогают повысить адаптивность системы в целом.
Installability: Устанавливаемость определяется как способность программного приложения быть установленным в желаемой среде без использования дополнительных ресурсов. Устанавливаемость выполняется на программном обеспечении, которое должно быть установлено в целевой среде.
Заменяемость: Возможность замены определяется как способность программного приложения заменять другое программное обеспечение в конкретной среде. Приложение, которое заменяет предыдущее приложение, должно давать одинаковые результаты во всех целевых средах.
Сосуществование: Сосуществование определяется как способность программного приложения работать с другим программным приложением в системе, не мешая друг другу и совместно используя один и тот же ресурс. Специально это тестирование используется в больших системах, которые включают в себя несколько подсистем.

48. Что такое тестирование графического интерфейса/визуальное тестирование? (GUI - Graphical User Interface testing)
Существует два типа интерфейсов для компьютерного приложения. Интерфейс командной строки, где вводится текст, и компьютер отвечает на эту команду и GUI - графический интерфейс пользователя, где впользовательзаимодействует с компьютером, используя графическое представление, а не текст.  Цель тестирования графического интерфейса пользователя (GUI) - проверить функциональность интерфейса пользователя.
Примеры:
Тестирование размера, положения, ширины, высоты элементов. 
Тестирование сообщений об ошибках, которые отображаются. 
Тестирование разных разделов экрана. 
Проверка шрифта, читаемый ли он или нет. 
Тестирование экрана в разных разрешениях с помощью увеличения и уменьшения масштаба, например, 640 x 480, 600x800 и т. д. 
Проверка выравнивания текстов и других элементов, таких как значки, кнопки и т. д. , находятся на своем месте или нет. 
Тестирование цветов шрифтов. 
Проверка цветов сообщений об ошибках, предупреждающих сообщений. 
Проверка, имеет ли изображение хорошую четкость или нет. 
Тестирование выравнивания изображений. 
Проверка орфографии. 
Пользователь не должен разочаровываться при использовании системного интерфейса. 
Тестирование, является ли интерфейс привлекательным или нет. 
Тестирование полос прокрутки в соответствии с размером страницы, если таковые имеются. 
Тестирование отключенных полей, если таковые имеются. 
Тестирование размера изображений. 
Проверка заголовков, правильно ли они выровнены или нет. 
Тестирование цвета гиперссылки.




