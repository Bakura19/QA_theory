1.	Что подразумевается под тестовой средой
Среда в которой работают тестировщики, в которой устанавливаются поставки ПО, которые выдают разработчики. Здесь тестировщики проверяют функционал, проводят регрессионное тестирование, воспроизводят ошибки.
2. В чем отличие build от release
Билд – это промежуточная версия программного средства. Релиз является окончательной версией программного средства.
3. Основные фазы тестирования
Pre-Alpha: прототип, в котором всё ещё присутствует много ошибок и наверняка неполный функционал. Необходим для ознакомления с будущими возможностями программ.
Alpha: является ранней версией программного продукта, тестирование которой проводится внутри фирмы-разработчика независимой командой тестировщиков.
Beta: практически готовый продукт, который разработан в первую очередь для тестирования конечными пользователями.
Release Candidate (RC): возможные ошибки в каждой из фичей уже устранены и разработчики выпускают версию на которой проводится регрессионное тестирование.
Release: финальная версия программы, которая готова к использованию.
Pre-Alpha: прототип, в котором всё ещё присутствует много ошибок и наверняка неполный функционал. Необходим для ознакомления с будущими возможностями программ.
Alpha: является ранней версией программного продукта, тестирование которой проводится внутри фирмы-разработчика независимой командой тестировщиков.
Beta: практически готовый продукт, который разработан в первую очередь для тестирования конечными пользователями.
Release Candidate (RC): возможные ошибки в каждой из фичей уже устранены и разработчики выпускают версию на которой проводится регрессионное тестирование.
Release: финальная версия программы, которая готова к использованию.
4. Что такое импакт анализ?
Импакт анализ - это исследование, которое позволяет указать затронутые места в проекте при разработке новой функциональности или изменении старой функциональности, а также определить, насколько значительно они были затронуты.
Импакт анализ может быть полезным в следующих случаях:
-есть изменения в требованиях;
-получен запрос на внесение изменений в продукт;
-ожидается внедрение нового модуля или функциональности в -существующий продукт;
-каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.
5. Критерии выбора тестов
 -достаточность, т. е. критерий должен показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы;
 -полнота, т. е. в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку;
 -надежность, т. е. любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы;
 -проверяемость, т. е. критерий должен быть легко проверяемым, например, вычисляемым на тестах.
6. Принципы тестирования
Принцип 1 — Тестирование демонстрирует наличие дефектов.
Тестирование только снижает вероятность наличия дефектов, которые находятся в программном обеспечении, но не гарантирует их отсутствия.
Принцип 2 — Исчерпывающее тестирование невозможно.
Полное тестирование с использованием всех входных комбинаций данных, результатов и предусловий физически невыполнимо (исключение — тривиальные случаи).
Принцип 3 — Раннее тестирование.
Следует начинать тестирование на ранних стадиях жизненного цикла разработки ПО, чтобы найти дефекты как можно раньше.
Принцип 4 — Скопление дефектов.
Большая часть дефектов находится в ограниченном количестве модулей.
Принцип 5 — Парадокс пестицида.
Если повторять те же тестовые сценарии снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты.
Принцип 6 — Тестирование зависит от контекста. 
Тестирование проводится по-разному в зависимости от контекста. Например, программное обеспечение, в котором критически важна безопасность, тестируется иначе, чем новостной портал.
Принцип 7 — Заблуждение об отсутствии ошибок. 
Отсутствие найденных дефектов при тестировании не всегда означает готовность продукта к релизу. Система должна быть удобна пользователю в использовании и удовлетворять его ожиданиям и потребностям. 
7. Независимое тестирование (аутсорсинг тестирования) - это тестирование силами дополнительно привлечённой компании или группы людей, не участвующих непосредственно в разработке программного обеспечения. Из самой идеи независимого тестирования следует, что работа выполняется группой людей, которые не находятся в прямом подчинении руководителя разработки программного проекта. 
8. Тестирование со сдвигом влево - это подход к тестированию программного обеспечения и системного тестирования, при котором тестирование выполняется на более ранней стадии жизненного цикла.
9. Как вы узнаете, было ли создано достаточно тестов для тестирования продукта? 
Прежде всего, мы проверим, охватывает ли каждое требование хотя бы один Test case. Если да, то можно сказать, что тестовых примеров достаточно для тестирования продукта. 
10. Этапы тестирования
-анализ системы и подбор требований;
-одготовка стратегии;
-настройка генератора нагрузки;
-проведение мониторинга серверов и генератора нагрузки;
-подготовка тестовых данных;
-разработка нагрузочных скриптов;
-предварительные запуски тестов;
-проведение тестирования;
-анализ результатов и подготовка отчёта.
11. Как вы тестируете продукт, если требования еще не зафиксированы? 
Если спецификация требований недоступна для продукта, тогда план тестирования может быть создан на основе предположений, сделанных относительно продукта. Но мы должны хорошо документировать все предположения в плане тестирования. 
12. 
13. Тестовые данные - это данные, которые нужны для выполнения тест-кейсов.
14. Бета-тестирование – интенсивное использование почти готовой версии продукта с целью выявления максимального числа ошибок в его работе для их последующего устранения перед окончательным выходом (релизом) продукта на рынок, к массовому потребителю. Бета-тестирование представляет собой реально работающую версию программы с полным функционалом. И задача бета-тестов – оценить возможности и стабильность работы программы с точки зрения ее будущих пользователей.
15. Пилотное тестирование - тип тестирования программного обеспечения, при котором проверяется компонент системы или вся система в рабочих условиях в реальном времени. Целью пилотного тестирования является оценка осуществимости, времени, стоимости, риска и производительности исследовательского проекта.
16. Бизнес-логика - это совокупность реализуемых прикладных функций в предметной области.
17. Какие существуют основные виды тестирования ПО? 
Функциональные виды («Что?» - проверяет весь функционал продукта):
Функциональное тестирование (Functional testing)
Тестирование взаимодействия (Interoperability testing)
Нефункциональное («Как?»):
Производительности (Performance)
Тестирование емкости/способностей (Capacity testing)
Стрессовое (Stress testing)
Нагрузочное (Load testing)
Объемное тестирование (Volume testing)
Выносливости (Soak/Endurance testing)
Стабильности/надежности (Stability / Reliability testing)
Шиповое (Spike)
Отказоустойчивости (Stability testing)
Масштабируемости (Scalability test)
Отказ и восстановление (Failover and Recovery testing)
Удобство пользования (Usability testing)
Тестирование установки (Installation testing)
Тестирование безопасности (Security and Access Control testing)
Конфигурационное (Configuration testing)
Связанное с изменениями:
Регрессионное (Regression testing)
Санитарное (Sanity testing)
Дымовое (Smoke testing)
Тестирование сборки (Build Verification testing)
18. Методы тестирования:
- Метод белого ящика - метод при котором тестировщик имеет доступ к внутренней структуре системы (код, БД) и опирается на её поинмание при составлении тестов или использует её во время тестирования.
- Метод чёрного ящика - тестирование приложения без знания внутренней структуры системы, когда тестировщик опирается на требования и работает с интерфесом как конечный пользователь.
- Метод серого ящика - тестирование при котором тестировщик имеет доступ только к некоторой части кода/БД и используетэто при составлении тестов и их выполнении.
19. Что такое пирамида / уровни тестирования? (Testing Levels)
«Пирамида тестов» — метафора, которая означает группировку тестов программного обеспечения по разным уровням детализации. Она также дает представление, какое количество тестов должно быть в каждой из этих групп. 
В тесте более высокого уровня не тестируется вся условная логика и пограничные случаи, которые уже покрыты юнит-тестами более низкого уровня. Нужно убедиться, что тест высокого уровня фокусируется только на том, что не покрыто тестами более низкого уровня.
20. Негативное тестирование -  это тестирование на данных или сценариях, которые соответствуют нештатному поведению тестируемой системы – различные сообщения об ошибках, исключительные ситуации. Основной целью “негативного” тестирования является проверка устойчивости системы к воздействиям различного рода, валидация неверного набора данных, проверка обработки исключительных ситуаций.
21. Позитивное тестирование - тестирование с применением сценариев, которые соответсвуют нормальному поведению программного средства.
22. Компонентное (модульное) тестирование - тестирование отдельного модульного.
23. Интеграционное тестирование - тестирование взаимодействия модулей.
24. Разница между Unit testing и Integration testing?
На практике получается так: если тест:
- использует базу данных,
- использует сеть для вызова другого компонента/приложения,
- использует внешнюю систему (например, очередь или почтовый сервер),
- читает/записывает файлы или выполняет другие операции ввода-вывода,
- полагается не на исходный код, а на бинарник приложения.
Итог: хотя теоретически можно использовать только интеграционные тесты, на практике:
Юнит-тесты легче поддерживать.
Юнит-тесты легко воспроизводят пограничные случаи и редкие ситуации.
Юнит-тесты выполняются гораздо быстрее интеграционных тестов.
Сбойные юнит-тесты легче исправить, чем интеграционные.
Если у есть только интеграционные тесты, то впустую тратятся и время разработки, и деньги компании. Нужны как модульные, так и интеграционные тесты одновременно. Они не взаимоисключающие.
25. Системное тестирование - полная проверка приложения.
26. В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)
Тестовый драйвер - это фрагмент кода, который вызывает тестируемый программный компонент. Это полезно при тестировании по принципу «снизу-вверх». Тестовая заглушка - это фиктивная программа, которая интегрируется с приложением для полной функциональности. Они актуальны для тестирования, в котором используется нисходящий подход. 
ПРИМЕР:
- 1. Допустим, есть сценарий для проверки интерфейса между модулями A и B. Мы разработали только модуль-A. Затем мы можем проверить модуль-A, если у нас есть реальный модуль-B или фиктивный модуль для него. В этом случае мы называем модуль-B тестовой заглушкой.  2. Теперь модуль B не может отправлять или получать данные напрямую из модуля A. В таком сценарии мы перемещаем данные из одного модуля в другой, используя некоторые внешние функции, называемые Test Driver. Заглушки и драйверы не реализуют всю логику программного модуля, а только моделируют обмен данными с вызывающим модулем. Заглушка: вызывается тестируемым модулем. Драйвер: вызывает модуль для тестирования.
27. Системное интеграционное тестирование - проверка законченнго и полностью интегрированного программного продукта.
28. Функциональное тестирование - тестирование, основаннок на анализе спецификации функциональности приложения, проводимое с целью проверки на соответствие требованиям. Проверка того "что" система делает.
29. Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)
Тестирование взаимодействия - функциональное тестирование, проверяющее способность приложения/устройства взаимодействовать с одним и более компонентами/системами/устройствами и включающее в себя тестирование совместимости (compatibility testing) и интеграционное тестирование (integration testing).  ПО с хорошими характеристиками взаимодействия может быть легко интегрировано с другими системами, не требуя каких-либо серьезных модификаций. В этом случае, количество изменений и время, требуемое на их выполнение, могут быть использованы для измерения возможности взаимодействия. Например, тестирование совместимости проводится между смартфонами и планшетами для проверки передачи данных через Bluetooth. Существуют разные уровни тестирования совместимости:
Аппаратное обеспечение: проверяет совместимость программного обеспечения с различными аппаратными конфигурациями. 
Операционные системы: Он проверяет ваше программное обеспечение на совместимость с различными операционными системами, такими как Windows, Unix*, Mac OS и т. д. 
Программное обеспечение: проверяет ваше разработанное программное обеспечение на совместимость с другим программным обеспечением. Например, приложение MS Word должно быть совместимо с другими программами, такими как MS Outlook, MS Excel, VBA и т. д. 
Сеть: оценка производительности системы в сети с различными параметрами, такими как пропускная способность, скорость работы, емкость. 
Браузер: проверяет совместимость вашего сайта с различными браузерами, такими как Firefox, Google Chrome, Internet Explorer и т. д. 
Устройства: проверяет совместимость вашего программного обеспечения с различными устройствами, такими как устройства USB-порта, принтеры и сканеры, другие мультимедийные устройства и Bluetooth. 
Mobile: проверка совместимости вашего программного обеспечения с мобильными платформами, такими как Android, iOS и т. д. 
Версии программного обеспечения. Он проверяет совместимость вашего программного приложения с различными версиями программного обеспечения. Например, проверка вашего Microsoft Word на совместимость с Windows 7, Windows 7 SP1, Windows 7 SP2, Windows 7 SP3.
Существует два типа проверки версий:
Тестирование обратной совместимости предназначено для проверки поведения разработанного аппаратного / программного обеспечения с использованием более старых версий аппаратного / программного обеспечения. 
Тестирование прямой совместимости заключается в проверке поведения разработанного аппаратного / программного обеспечения с использованием более новых версий аппаратного / программного обеспечения.
Пример тестирования взаимодействия: 
Подключить (connect) два или более устройств от разных производителей 
Проверить связь между устройствами 
Проверьте, может ли устройство отправлять / получать пакеты или фреймы друг от друга 
Проверить, правильно ли обрабатываются данные на уровне сети и объектов 
Проверить, правильно ли работают реализованные алгоритмы 
Результат в порядке: проверьте следующий результат. Результат не в порядке: используйте инструменты мониторинга, чтобы обнаружить источник ошибки 
Отчет о результатах в тестовом отчете.
30. Тестирование соответствия - это метод тестирования программного обеспечения, используемый для подтверждения того, что программная система соответствует определённым стандартам и правилам. Целью тестирования соответствия является определение того, как тестируемая система подтверждает соответствие индивидуальным требованиям конкретного стандарта. 
31. Нефункциональное тестирование - тестирование свойств приложения, которые не относятся к функциональности системы. Проверка того, "как" работает приложение (надёжность, эффективность, безопасность, сопровождаемость).
32. Что вы знаете о Тестировании удобства пользования? (Usability testing)
Тестирование удобства пользования - это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий. Тестирование удобства пользования дает оценку уровня удобства использования приложения по следующим пунктам:
- производительность, эффективность (efficiency) - сколько времени и шагов понадобится пользователю для завершения основных задач приложения, например, размещение новости, регистрации, покупка и т. д. ? (меньше - лучше)
- правильность (accuracy) - сколько ошибок сделал пользователь во время работы с приложением? (меньше - лучше)
- активизация в памяти (recall) – как много пользователь помнит о работе приложения после приостановки работы с ним на длительный период времени? (повторное выполнение операций после перерыва должно проходить быстрее чем у нового пользователя)
- эмоциональная реакция (emotional response) – как пользователь себя чувствует после завершения задачи - растерян, испытал стресс? Порекомендует ли пользователь систему своим друзьям? (положительная реакция - лучше)
Проверка удобства использования может проводиться как по отношению к готовому продукту, посредством тестирования черного ящика (black box testing), так и к интерфейсам приложения (API), используемым при разработке - тестирование белого ящика (white box testing). В этом случае проверяется удобство использования внутренних объектов, классов, методов и переменных, а также рассматривается удобство изменения, расширения системы и интеграции ее с другими модулями или системами. Использование удобных интерфейсов (API) может улучшить качество, увеличить скорость написания и поддержки разрабатываемого кода, и как следствие улучшить качество продукта в целом. Отсюда становится очевидно, что тестирование удобства пользования может производиться на разных уровнях разработки ПО: модульном, интеграционном, системном и приемочном.
33. Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
USABILITY testing показывает, насколько проста в использовании и удобна система программного обеспечения. Здесь небольшой набор целевых конечных пользователей «использует» программную систему для выявления дефектов юзабилити. Основное внимание в этом тестировании уделяется простоте использования приложения пользователем, гибкости в управлении средствами управления и способности системы выполнять свои задачи. Это также называется тестированием пользовательского опыта (UX – "Ю-Экс", user experience). Это тестирование рекомендуется на начальном этапе разработки SDLC, что позволяет лучше понять ожидания пользователей. Исследования показывают, что 5 пользователей достаточно для выявления 80% проблем с юзабилити. Тестирование доступности (accessibility testing) - это подмножество юзабилити-тестирования. Его цель - убедиться в том, что наш продукт удобен в использовании для людей с различными видами инвалидности или особенностей восприятия. Это могут быть проблемы со зрением, слухом или ограничения в подвижности рук.  Ваш продукт должен правильно работать с соответствующим ПО.
34. Что такое тестирование интерфейса?
Это тип интеграционного теста, который проверяет, правильно ли установлена связь между двумя различными программными системами или их частями (модулями). Соединение, которое объединяет два компонента, называется интерфейсом. Этот интерфейс в компьютерном мире может быть чем угодно, как API, так и веб-сервисами. Тестирование этих подключаемых сервисов или интерфейса называется Тестированием интерфейса. Тестирование интерфейса включает в себя тестирование двух основных сегментов: 
- интерфейс веб-сервера и сервера приложений 
- интерфейс сервера приложений и базы данных
35. Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
Это тип тестирования программного обеспечения, который проверяет, что каждый software workflow точно отражает данный бизнес-процесс. Workflow - это серия задач для получения желаемого результата, которая обычно включает несколько этапов или шагов. Для любого бизнес-процесса тестирование этих последовательных шагов определяется как «WorkFlow testing». Например, убедитесь, что система может быть установлена на платформе пользователя и работает правильно. Тестирование рабочего процесса проводится поэтапно. Вот как вы будете выполнять Workflow testing:
Начальная фаза (Inception phase): эта фаза включает начальное планирование испытаний и тестирование прототипа 
Фаза разработки (Elaboration phase): Эта фаза включает базовую архитектуру тестирования 
Фаза строительства (Construction phase): эта фаза включает в себя значительные испытания в каждой сборке 
Фаза перехода (Transition phase): Эта фаза включает в себя регрессионные тесты и повторные тесты исправлений
Тестирование workflow выполняется:
Test engineer: планирует цели теста и график. Определяет Test case и процедуры. Оценивает результаты теста.
Component engineer: Разработка тестовых компонентов. Автоматизирует некоторые тестовые процедуры.
Integration Tester: Выполнение интеграционных тестов и выявление дефектов 
System Testers: Выполнение системных тестов и отчеты о дефектах
36. Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
Пользовательское приемочное тестирование (UAT) - это тип тестирования, выполняемый конечным пользователем или клиентом для проверки / принятия ПО перед его перемещением в production. UAT выполняется на заключительном этапе тестирования после выполнения функциональных, интеграционных и системных испытаний. Основной целью UAT является проверка end-to-end business flow. Он не фокусируется на косметических ошибках, орфографических ошибках или тестировании системы. Приемочное тестирование пользователя выполняется в отдельной среде тестирования с настройкой данных, аналогичных производственным. Это своего рода тестирование черного ящика, в котором будут участвовать два или более конечных пользователя. Этапы:
- анализ бизнес-требований 
- создать плана тестирования UAT 
- определить тест-сценарий 
- создать Test case UAT 
- подготовить Test Data (Production like Data) 
- запустить Test case
- записать результаты
- подтвердить бизнес-цели
37. Что такое эксплуатационное приемочное тестирование? (OAT - Operational Acceptance testing)
ИСПЫТАНИЕ НА ЭКСПЛУАТАЦИЮ (OAT) - это тип тестирования программного обеспечения, который оценивает операционную готовность программного приложения до его выпуска в производство. Целью эксплуатационного тестирования является обеспечение бесперебойной работы системы в ее стандартной операционной среде (SOE - standard operating environment). Это также называется Оперативное тестирование (Operational testing). Эксплуатационное приемочное тестирование обеспечивает соответствие системы и компонентов в стандартной операционной среде приложения (SOE). Типы OAT:
Installation testing
Load & Performance Test Operation
Backup and Restore testing
Security testing
Code Analysis
Fail over testing
Recovery testing
End-to-End Test Environment Operational testing
Operational Documentation Review
Примеры Test case:
Резервные копии, сделанные на одном сайте, могут быть развернуты на тот же сайт 
Резервные копии, сделанные на одном сайте, можно развернуть на другом сайте. 
Внедрение любых новых функций в живую производственную среду не должно отрицательно влиять на целостность текущих производственных услуг. 
Процесс внедрения может быть воспроизведен с использованием действующей документации 
Каждый компонент может быть отключен и успешно запущен в согласованные сроки. 
Для оповещений - все критические оповещения должны идти в TEC и ссылаться на документ правильного разрешения. 
Оповещения созданы и выдаются при превышении согласованных пороговых значений 
Любая документация по восстановлению, созданная или измененная, включая сервисные диаграммы, действительна 
Это должно быть передано в соответствующие области поддержки. 
Любой компонент, на который влияет сбой, должен показывать рекомендуемый порядок перезапуска, время завершения и т. д. 
38. Расскажите об инсталляционном тестировании?
Тестирование инсталляции (установки) направленно на проверку успешной инсталляции и настройки, а также обновления или удаления ПО, как десктопного, так и мобильного. Тестирование инсталляции в большинстве своем не входит в Веб-тестирование, являясь специализированным тестированием установки приложений на различные операционные системы. Следующие проверки должны быть выполнены для этапов: Установка. 
Установка должна начаться при клике по кнопке, подтверждающей данное действие
Установки во всех поддерживаемых окружениях и на всех поддерживаемых платформах
Установки в неподдерживаемых окружениях, а также в нужных окружениях с некорректными настройками
Права, которые требует инсталляция (чаще всего они должны быть админскими), проверить установить приложение как гость
Установки в clean state (при отсутствии любых возможных связанных файлов и предыдущих версий)
Подсчитывается ли при установке количество свободного места на диске и выдается ли предупреждение если места недостаточно
Установки загруженного ранее приложения, а также прямая установка с использованием сети/беспроводного соединения
Восстановится ли процесс установки при внезапном его прерывании (отключение устройства, отказ сети, отключение беспроводного соединения)
Установка приложения, его запуск, удаление приложения должны возвращать систему в исходное состояние
Распознается ли наличие в системе приложений/программ, необходимых для корректной работы устанавливаемого приложения
Повторный запуск установки приложения при уже текущем должен выдавать корректное сообщение, двойная установка должна быть исключена
Процесс установки может быть настраиваемый/дефолтный. Убедиться, что оба корректно работают
Наличие кнопки, которая предложит сохранить приложение в определенную папку, а также указывает дефолтное местоположение ("C:/programs/.")
Правильно ли установлены, сохранены ли в корректных папках файлы приложения
Наличие созданных ярлыков, корректно ли они расположены
После установки в системной вкладке " Программы и компоненты" должны быть доступны: название приложения, иконка, имя издателя, размер приложения, дата установки и номер версии
Настройки переменных сред PATH
Убедиться, что лицензионный ключ сохраняется в Windows Registry library
Поддерживает ли приложение функции ‘UnInstall’, ‘Modify’, ‘ReInstall’ и корректно ли они работают
Работа приложения с уже существующими DLL-файлами, с DLL-файлами приложений, которые необходимы для корректной работы устанавливаемого приложения
Наличие информации/сообщение о том, когда истекает срок действия установленной пробной версии приложения
Обновление:
Поддерживает ли приложение функцию обновления/автообновления
При попытке установить ранее установленную версию приложения система должна ее распознать и выдать корректное сообщение
Сохраняются ли пользовательские настройки при попытке загрузить новую версию/обновить старую версию
При попытке обновить версию должны быть доступны функции удалить приложение и восстановить приложение
Стандартные проверки как при первичной установке приложения
Убедиться, что номер версии приложения сменился новым
Запустить приложение и убедиться, что оно работает корректно
Откат до предыдущей версии:
Попробовать установить старую версию на более новую
Наличие корректного сообщения при попытке отката
Убедиться, что приложение работает корректно
Удаление приложения:
Не остается ли в системе никаких папок/файлов/ярлыков/ключей реестра после полного удаления приложения
Корректно ли работает система после установки и последующего удаления приложения
39. Что вы знаете о тестировании безопасности? (Security and Access Control testing)
Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов. Общая стратегия безопасности основывается на трех основных принципах:
Конфиденциальность - сокрытие определенных ресурсов или информации
Целостность – ресурс может быть изменен только в соответствии с полномочиями пользователя
Доступность - ресурсы должны быть доступны только авторизованному пользователю, внутреннему объекту или устройству
Тестирование безопасности обычно выполняет отдельный специалист по безопасности. В ходе тестирования безопасности испытатель играет роль взломщика. Ему разрешено все:
попытки узнать пароль с помощью внешних средств;
атака системы с помощью специальных утилит, анализирующих защиты;
подавление, ошеломление системы (в надежде, что она откажется обслуживать других клиентов);
целенаправленное введение ошибок в надежде проникнуть в систему в ходе восстановления;
просмотр несекретных данных в надежде найти ключ для входа в систему.
При неограниченном времени и ресурсах хорошее тестирование безопасности взломает любую систему. Задача проектировщика системы — сделать цену проникновения более высокой, чем цена получаемой в результате информации. Типы тестирования безопасности:
Сканирование уязвимостей/оценка защищенности (Vulnerability Scanning) выполняется с помощью автоматизированного ПО для сканирования системы на наличие известных сигнатур уязвимостей. 
Сканирование безопасности (Security Scanning) включает в себя выявление слабых сторон сети и системы, а затем предоставляет решения для снижения этих рисков. Это сканирование может быть выполнено как ручным, так и автоматизированным.
Тестирование на проникновение (Penetration testing) - этот тип тестирования имитирует атаку злоумышленника. Это тестирование включает анализ конкретной системы для проверки потенциальных уязвимостей при попытке внешнего взлома. 
Оценка рисков (Risk Assessment) тестирование включает анализ рисков безопасности, наблюдаемых в организации. Риски классифицируются как Низкие, Средние и Высокие. Это тестирование рекомендует меры по снижению риска. 
Аудит безопасности (Security Auditing) - внутренняя проверка приложений и операционных систем на наличие уязвимостей. Аудит также может быть выполнен путем построчной проверки кода 
Этический взлом (Ethical hacking) - совершается с целью выявления проблем безопасности в системе. Это делается White Hat хакерами - это специалисты по безопасности, которые использует свои навыки законным способом для помощи в выявлении дефектов системы, в отличии от Black Hat (преступников) или Gray Hat (что-то между).
Оценка состояния (Posture Assessment) объединяет сканирование безопасности, этический взлом и оценки рисков, чтобы показать общее состояние безопасности организации.
40. Что вы знаете о конфигурационном тестировании? (Configuration testing)
Конфигурационное тестирование (Configuration testing) — специальный вид тестирования, направленный на проверку работы ПО при различных аппаратных и программных конфигурациях системы (заявленных платформах, поддерживаемых драйверах, при различных конфигурациях компьютеров и т. д. ) В зависимости от типа проекта конфигурационное тестирование может иметь разные цели:
Проект по профилированию работы системы Цель Тестирования: определить оптимальную конфигурацию оборудования, обеспечивающую требуемые характеристики производительности и времени реакции тестируемой системы.
Для клиент-серверных приложений конфигурационное тестирование можно условно разделить на два уровня (для некоторых типов приложений может быть актуален только один):
Серверный
Клиентский
На первом (серверном) уровне, тестируется взаимодействие выпускаемого ПО с окружением, в которое оно будет установлено:
Аппаратные средства (тип и количество процессоров, объем памяти, характеристики сети / сетевых адаптеров и т. д.)
Программные средства (ОС, драйвера и библиотеки, стороннее ПО, влияющее на работу приложения и т. д.)
Основной упор здесь делается на тестирование с целью определения оптимальной конфигурации оборудования, удовлетворяющего требуемым характеристикам качества (эффективность, портативность, удобство сопровождения, надежность). На следующем (клиентском) уровне, ПО тестируется с позиции его конечного пользователя и конфигурации его рабочей станции. На этом этапе будут протестированы следующие характеристики: удобство использования, функциональность. Для этого необходимо будет провести ряд тестов с различными конфигурациями рабочих станций:
Тип, версия и битность операционной системы (подобный вид тестирования называется кроссплатформенное тестирование)
Тип и версия Web браузера, в случае если тестируется Web приложение (подобный вид тестирования называется кросс-браузерное тестирование)
Тип и модель видеоадаптера (при тестировании игр это очень важно)
Работа приложения при различных разрешениях экрана
Версии драйверов, библиотек и т. д.  (для JAVA приложений версия JAVA машины очень важна, тоже можно сказать и для .NET приложений касательно версии .NET библиотеки)
и т. д.  Перед началом проведения конфигурационного тестирования рекомендуется:
создавать матрицу покрытия (матрица покрытия - это таблица, в которую заносят все возможные конфигурации),
проводить приоритезацию конфигураций (на практике, скорее всего, все желаемые конфигурации проверить не получится),
шаг за шагом, в соответствии с расставленными приоритетами, проверять каждую конфигурацию.
Уже на начальном этапе становится очевидно, что чем больше требований к работе приложения при различных конфигурациях рабочих станций, тем больше тестов нам необходимо будет провести. В связи с этим, рекомендуем, по возможности, автоматизировать этот процесс, так как именно при конфигурационном тестировании автоматизация реально помогает сэкономить время и ресурсы. Конечно же автоматизированное тестирование не является панацеей, но в данном случае оно окажется очень эффективным помощником. В итоге: конфигурационным называется тестирование совместимости выпускаемого продукта (ПО) с различным аппаратным и программным средствами. Основные цели - определение оптимальной конфигурации и проверка совместимости приложения с требуемым окружением (оборудованием, ОС и т. д.). Автоматизация конфигурационного тестирования позволяет избежать лишних расходов Примечание: в ISTQB вообще не говорится о таком виде тестирования как конфигурационное. Согласно глоссарию, данный вид тестирования рассматривается там как тестирование портируемости: configuration testing: See portability testing. portability testing: The process of testing to determine the portability of a software product.
41. Объясните, что такое тестирование N+1?
Вариант регрессионного тестирования представлен как N+1. В этом методе тестирование выполняется в несколько циклов, в которых ошибки, обнаруженные в тестовом цикле «N», устраняются и повторно тестируются в тестовом цикле N + 1. Цикл повторяется, пока не будет найдено ни одной ошибки.
42. Что вы знаете о тестировании сборки? (Build Verification Test)
Тестирование, направленное на определение соответствия, выпущенной версии, критериям качества для начала тестирования. По своим целям является аналогом Дымового Тестирования, направленного на приемку новой версии в дальнейшее тестирование или эксплуатацию. Вглубь оно может проникать дальше, в зависимости от требований к качеству выпущенной версии.
43. Что такое тестирование потоков? (Thread testing) 
Тестирование потоков определяется как тип тестирования программного обеспечения, который проверяет основные функциональные возможности конкретной задачи (потока). Обычно проводится на ранней стадии фазы интеграционного тестирования. Тестирование на основе потоков является одной из дополнительных стратегий, принятых в ходе тестирования системной интеграции. Поэтому его, вероятно, следует более правильно назвать «тестом взаимодействия потоков» (thread interaction test). Тестирование на основе потоков подразделяется на две категории:
Однопоточное тестирование включает одну транзакцию приложения за раз 
Многопоточное тестирование включает одновременно несколько активных транзакций
Как производить:
Тестирование на основе потоков является обобщенной формой тестирования на основе сеансов (session-based testing), в котором сеансы являются формой потока, но поток не обязательно является сеансом. 
Для тестирования потока, поток или программа (небольшая функциональность) интегрируются и тестируются постепенно как подсистема, а затем выполняются для всей системы. 
На самом низком уровне оно предоставляет интеграторам лучшее представление о том, что тестировать. 
Вместо непосредственного тестирования программных компонентов требуется, чтобы интеграторы сосредоточились на тестировании логических путей выполнения в контексте всей системы.
44. Mutation testing - это тип тестирования программного обеспечения, в котором мы мутируем (меняем) определенные выражения в исходном коде и проверяем, способны ли Test case найти ошибки. Это тип тестирования белого ящика, который в основном используется для модульного тестирования. Изменения в мутантной программе сохраняются крайне небольшими, поэтому это не влияет на общую цель программы. Цель Mutation testing - оценить качество Test case, которые должны быть достаточно надежными, чтобы не выполнять мутантный код. Этот метод также называется стратегией тестирования на основе ошибок, так как он включает в себя создание ошибки в программе. 
Шаг 1: Ошибки вводятся в исходный код программы путем создания множества версий, называемых мутантами. Каждый мутант должен содержать одну ошибку, и цель состоит в том, чтобы заставить версию мутанта потерпеть неудачу, что демонстрирует эффективность Test case. 
Шаг 2: Test case применяются к исходной программе, а также к программе мутанта. 
Шаг 3: Сравните результаты оригинальной и мутантной программы. 
Шаг 4: Если исходная программа и программы-мутанты генерируют разные выходные данные, то этот мутант уничтожается by the Test case. Следовательно, Test case достаточно хорош, чтобы обнаружить изменение между оригинальной и мутантной программой. 
Шаг 5: Если исходная программа и программа-мутант генерируют одинаковые выходные данные, мутант остается в живых. В таких случаях необходимо создать более эффективные Test case, которые убивают всех мутантов.
Что изменить в программе мутантов? Есть несколько методов, которые могут быть использованы для создания мутантных программ: 
Операторы замены операндов (Operand replacement operators) – например, в условии if (x> y) поменять местами значения x и y
Операторы модификации выражений (Expression Modification Operators) – например, в условии if (х == у) Мы можем заменить == на >=
Операторы модификации операторов (Statement modification Operators) – например, удалить часть else в конструкции if-else или удалить целиком конструкцию if-else, чтобы проверить, как ведет себя программа.
45. В чем разница между Baseline и Benchmark testing?
Baseline предназначено для оценки производительности приложения. Benchmark сравнивает производительность приложения с отраслевым стандартом. 
Baseline тестирование использует данные, собранные для повышения производительности. Benchmark возвращает информацию о целевом приложении по сравнению с другими приложениями.
Baseline тестирование сравнивает текущую производительность с предыдущей производительностью приложения, тогда как Benchmark сравнивает производительность нашего приложения с производительностью конкурентов.
46. A/B тестирование.
A / B-тестирование также называется сплит-тестированием. При тестировании AB мы создаем и анализируем два варианта приложения, чтобы найти, какой вариант работает лучше с точки зрения пользовательского опыта, потенциальных клиентов, а затем в конечном итоге сохраняем наиболее эффективный вариант. 
47. Что означает сквозное тестирование? (E2E - End–to–End)
Сквозное тестирование - это стратегия тестирования для выполнения тестов, которые охватывают все возможные потоки приложения от его начала до конца; проверяет программную систему вместе с ее интеграцией с внешними интерфейсами. Сквозное тестирование обычно выполняется после функционального и системного тестирования.
48. В чем разница между E2E и системным тестированием?
End to End testing: 
- Проверяет программную систему, а также взаимосвязанные подсистемы. 
- Проверяет весь E2E flow. 
- Все интерфейсы, бэкэнд-системы. 
- Выполняется после завершения System testing. 
- Сквозное тестирование включает проверку внешних интерфейсов, которые могут быть сложными для автоматизации. Следовательно, ручное тестирование является предпочтительным.
System testing: 
- Проверяет только программную систему в соответствии со спецификациями требований.
- Проверяет функциональные возможности и функции системы.
- Функциональное и нефункциональное тестирование
- Выполняется после завершения Integration testing
- Как ручное, так и автоматическое могут быть выполнены для тестирования системы
49. Параллельное тестирование - метод тестирования для обнаружения дефектов в приложении, когда в систему вошли несколько пользователей, то есть отслеживание эффекта, когда несколько пользователей выполняют одно и то же действие одновременно.
Зачем оно нужно:
Определяет влияние одновременного доступа к одним и тем же записям базы данных, модулям или коду приложения. 
Определяет и измеряет уровень взаимоблокировки, блокировки и использования однопоточного кода и ограничения доступа к общим ресурсам
50. Отличие AdHoc тестирования от исследовательского тестирования. 
При исследовательском тестировании тесты разрабатываются и выполненяются в одно и то же время, полученная информация при тестировании используется для проектирования новых и улучшеных тестов. При AdHoc тестировании отсутствуют документация, тест-дизайн, тест-кейсы, а используются только знания и представления тестировщика о программном средстве.


51. Тестирование переносимости — это тип тестирования программного обеспечения, который проводится для определения степени легкости или сложности, с которой программное приложение может быть эффективно и эффективно перенесено с одного аппаратного обеспечения, программного обеспечения или среды на другое. Результаты тестирования переносимости представляют собой измерения того, насколько легко программный компонент или приложение будут интегрированы в среду, и затем эти результаты будут сравниваться с нефункциональным требованием переносимости программной системы. Измерение основано на сравнении стоимости адаптации программного обеспечения к новой среде и стоимости реконструкции. Атрибуты тестирования переносимости:
Адаптивность: Адаптируемость определяется как способность программного приложения адаптироваться к конкретной среде без каких-либо усилий. Общие стандарты связи между несколькими системами помогают повысить адаптивность системы в целом.
Installability: Устанавливаемость определяется как способность программного приложения быть установленным в желаемой среде без использования дополнительных ресурсов. Устанавливаемость выполняется на программном обеспечении, которое должно быть установлено в целевой среде.
Заменяемость: Возможность замены определяется как способность программного приложения заменять другое программное обеспечение в конкретной среде. Приложение, которое заменяет предыдущее приложение, должно давать одинаковые результаты во всех целевых средах.
Сосуществование: Сосуществование определяется как способность программного приложения работать с другим программным приложением в системе, не мешая друг другу и совместно используя один и тот же ресурс. Специально это тестирование используется в больших системах, которые включают в себя несколько подсистем.

52. Что такое тестирование графического интерфейса/визуальное тестирование? (GUI - Graphical User Interface testing)
Существует два типа интерфейсов для компьютерного приложения. Интерфейс командной строки, где вводится текст, и компьютер отвечает на эту команду и GUI - графический интерфейс пользователя, где впользовательзаимодействует с компьютером, используя графическое представление, а не текст.  Цель тестирования графического интерфейса пользователя (GUI) - проверить функциональность интерфейса пользователя.
Примеры:
Тестирование размера, положения, ширины, высоты элементов. 
Тестирование сообщений об ошибках, которые отображаются. 
Тестирование разных разделов экрана. 
Проверка шрифта, читаемый ли он или нет. 
Тестирование экрана в разных разрешениях с помощью увеличения и уменьшения масштаба, например, 640 x 480, 600x800 и т. д. 
Проверка выравнивания текстов и других элементов, таких как значки, кнопки и т. д. , находятся на своем месте или нет. 
Тестирование цветов шрифтов. 
Проверка цветов сообщений об ошибках, предупреждающих сообщений. 
Проверка, имеет ли изображение хорошую четкость или нет. 
Тестирование выравнивания изображений. 
Проверка орфографии. 
Пользователь не должен разочаровываться при использовании системного интерфейса. 
Тестирование, является ли интерфейс привлекательным или нет. 
Тестирование полос прокрутки в соответствии с размером страницы, если таковые имеются. 
Тестирование отключенных полей, если таковые имеются. 
Тестирование размера изображений. 
Проверка заголовков, правильно ли они выровнены или нет. 
Тестирование цвета гиперссылки.




